const fetch = require('node-fetch');

const API_KEY = 'ak_3b1925b8197c03bf12cb20b102ea86ecded2fe064080c3ff';
const BASE_URL = 'https://assessment.ksensetech.com/api';

async function fetchPatients(page = 1, limit = 20, allPatients = []) {
  const url = `${BASE_URL}/patients?page=${page}&limit=${limit}`;
  const res = await fetch(url, {
    headers: { 'x-api-key': API_KEY }
  });
  if (res.status === 429) {
    console.log('Rate limited, retrying after 1 second...');
    await new Promise(r => setTimeout(r, 1000));
    return fetchPatients(page, limit, allPatients);
  }
  if (!res.ok) {
    console.log(`Error fetching page ${page}: ${res.status}`);
    await new Promise(r => setTimeout(r, 1000));
    return fetchPatients(page, limit, allPatients);
  }
  const json = await res.json();
  allPatients.push(...json.data);
  if (json.pagination.hasNext) {
    return fetchPatients(page + 1, limit, allPatients);
  }
  return allPatients;
}

function parseBloodPressure(bp) {
  if (!bp || typeof bp !== 'string') return null;
  const parts = bp.split('/');
  if (parts.length !== 2) return null;
  const systolic = parseInt(parts[0], 10);
  const diastolic = parseInt(parts[1], 10);
  if (isNaN(systolic) || isNaN(diastolic)) return null;
  return { systolic, diastolic };
}

function bloodPressureRisk(bp) {
  const values = parseBloodPressure(bp);
  if (!values) return 0;
  const { systolic, diastolic } = values;
  // Determine risk stage by highest category between systolic and diastolic
  let systolicStage, diastolicStage;

  if (systolic < 120) systolicStage = 1;
  else if (systolic >= 120 && systolic <= 129) systolicStage = 2;
  else if (systolic >= 130 && systolic <= 139) systolicStage = 3;
  else if (systolic >= 140) systolicStage = 4;
  else systolicStage = 0;

  if (diastolic < 80) diastolicStage = 1;
  else if (diastolic >= 80 && diastolic <= 89) diastolicStage = 3;
  else if (diastolic >= 90) diastolicStage = 4;
  else diastolicStage = 0;

  return Math.max(systolicStage, diastolicStage);
}

function temperatureRisk(temp) {
  const t = parseFloat(temp);
  if (isNaN(t)) return 0;
  if (t <= 99.5) return 0;
  if (t >= 99.6 && t <= 100.9) return 1;
  if (t >= 101) return 2;
  return 0;
}

function ageRisk(age) {
  const a = parseInt(age, 10);
  if (isNaN(a)) return 0;
  if (a < 40) return 1;
  if (a >= 40 && a <= 65) return 1;
  if (a > 65) return 2;
  return 0;
}

function hasDataQualityIssue(patient) {
  const bpValid = parseBloodPressure(patient.blood_pressure) !== null;
  const tempValid = !isNaN(parseFloat(patient.temperature));
  const ageValid = !isNaN(parseInt(patient.age, 10));
  return !(bpValid && tempValid && ageValid);
}

async function submitAssessment(results) {
  const url = `${BASE_URL}/submit-assessment`;
  const res = await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'x-api-key': API_KEY
    },
    body: JSON.stringify(results)
  });
  return res.json();
}

async function main() {
  console.log('Fetching patient data...');
  const patients = await fetchPatients();

  const highRisk = [];
  const fever = [];
  const dataIssues = [];

  for (const patient of patients) {
    const bpScore = bloodPressureRisk(patient.blood_pressure);
    const tempScore = temperatureRisk(patient.temperature);
    const ageScore = ageRisk(patient.age);
    const totalRisk = bpScore + tempScore + ageScore;

    if (totalRisk >= 4) highRisk.push(patient.patient_id);
    if (!isNaN(parseFloat(patient.temperature)) && parseFloat(patient.temperature) >= 99.6) fever.push(patient.patient_id);
    if (hasDataQualityIssue(patient)) dataIssues.push(patient.patient_id);
  }

  const results = {
    high_risk_patients: highRisk,
    fever_patients: fever,
    data_quality_issues: dataIssues
  };

  console.log('Submitting results...');
  const response = await submitAssessment(results);
  console.log('Submission response:', response);
}

main().catch(console.error);
